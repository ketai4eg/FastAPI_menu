version: '3.9'

networks:
  menu_app_network:
    name: menu_app_network
    driver: bridge


volumes:
  pgdata:


services:
  menu_app:
    container_name: fastapi_menu
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_HOST=app_db
      - PG_PORT=${PG_PORT}
      - PG_DB=${PG_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_ENCODING=${REDIS_ENCODING}
      - REDIS_CACHE_EXPIRE_TIME=${REDIS_CACHE_EXPIRE_TIME}
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS}

    entrypoint: >
      sh -c "
        echo 'Starting app now' &&
        echo 'we are ready' &&
        uvicorn src.main:menu_app --host 0.0.0.0 --reload
      "
    volumes:
      - ./src:/app/src/
    networks:
      - menu_app_network
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      app_db:
        condition: service_healthy
      app_redis:
        condition: service_healthy


  app_db:
    container_name: app_db
    image: postgres:15.1-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}
    expose:
      - 5432
    ports:
      - '5433:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./logs:/var/log
      - .:/docker-entrypoint-initdb.d
    networks:
      - menu_app_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin1 -d app_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  app_redis:
    container_name: app_redis
    image: redis:latest
    expose:
      - 6379
    ports:
      - "9000:6379"
    networks:
      - menu_app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 20s
      retries: 100
